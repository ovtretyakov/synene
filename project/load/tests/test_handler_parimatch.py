import os
from datetime import datetime, date, timedelta
from decimal import Decimal

from unittest import skip

from django.test import TestCase
from django.test.utils import override_settings

from core.models import Country, League, Team, Match, MatchStats
from betting.models import BetType, ValueType, Odd, OddWDL, OddTotalOver, OddTotalUnder, OddHandicap
from load.models import ErrorLog
from load.handlers.parimatch import ParimatchHandler 

def prepare_data(obj):
    obj.handler = ParimatchHandler.get()


#######################################################################################
######  ParimatchHandler
#######################################################################################
class ParimatchHandlerTest(TestCase):

    def setUp(self):
        prepare_data(self)

    #######################################################################
    def test_espn_handler_get(self):
        handler = ParimatchHandler.get()
        self.assertEquals(handler.slug, ParimatchHandler.SRC_PARIMATCH)

    #######################################################################
    # @override_settings(DEBUG=True)
    def test_parimatch_process_debug_file(self):
        UnknownCountry = Country.get_object("na")
        self.assertIsNotNone(UnknownCountry)
        Portugal = Country.get_object("prt")
        self.assertIsNotNone(Portugal)
        Italy = Country.get_object("ita")
        self.assertIsNotNone(Italy)
        now = datetime.now()

        self.handler.process(debug_level=2, get_from_file=True)

        #Football. UEFA Champions League
        uefa_league = League.objects.get(name__icontains= "UEFA Champions", load_source=self.handler)
        self.assertEquals(uefa_league.name, "Football. UEFA Champions League")
        self.assertEquals(uefa_league.country, UnknownCountry)
        match_cnt = Match.objects.filter(league=uefa_league).count()
        self.assertEquals(match_cnt, 6)

        #FC Porto - Roma
        Porto = Team.objects.get(name="FC Porto(PRT)")
        Roma = Team.objects.get(name="Roma(ITA)")
        match_date = date(now.year, 3, 6)
        match1 = Match.objects.get(
                    league=uefa_league,
                    match_date=match_date,
                    team_h=Porto,
                    team_a=Roma)
        self.assertEquals(str(match1), "FC Porto(PRT) - Roma(ITA)")
        self.assertEquals(match1.status, Match.SCHEDULED)

        ####################################################################
        #Bet WDL - w
        ####################################################################
        odd = match1.get_odd(bet_type_slug=BetType.WDL,param="w",period=0)
        self.assertIsNotNone(odd)
        self.assertEquals(odd.__class__.__name__, OddWDL.__name__)
        self.assertEquals(odd.status, Odd.WAITING)
        self.assertEquals(odd.result, Odd.UNKNOWN)
        self.assertEquals(odd.odd_value, Decimal("1.89"))
        #Bet WDL - d
        odd = match1.get_odd(bet_type_slug=BetType.WDL,param="d",period=0)
        self.assertEquals(odd.__class__.__name__, OddWDL.__name__)
        self.assertEquals(odd.odd_value, Decimal("3.9"))
        #Bet WDL - l
        odd = match1.get_odd(bet_type_slug=BetType.WDL,param="l",period=0)
        self.assertEquals(odd.__class__.__name__, OddWDL.__name__)
        self.assertEquals(odd.odd_value, Decimal("4"))
        #Bet WDL - wd
        odd = match1.get_odd(bet_type_slug=BetType.WDL,param="wd",period=0)
        self.assertEquals(odd.__class__.__name__, OddWDL.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.27"))
        #Bet WDL - dl
        odd = match1.get_odd(bet_type_slug=BetType.WDL,param="dl",period=0)
        self.assertEquals(odd.__class__.__name__, OddWDL.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.97"))
        #Bet WDL - wl
        odd = match1.get_odd(bet_type_slug=BetType.WDL,param="wl",period=0)
        self.assertEquals(odd.__class__.__name__, OddWDL.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.28"))
        #1st half
        odd = match1.get_odd(bet_type_slug=BetType.WDL,param="w",period=1)
        self.assertEquals(odd.__class__.__name__, OddWDL.__name__)
        self.assertEquals(odd.odd_value, Decimal("2.55"))
        odd = match1.get_odd(bet_type_slug=BetType.WDL,param="d",period=1)
        self.assertEquals(odd.__class__.__name__, OddWDL.__name__)
        self.assertEquals(odd.odd_value, Decimal("2.37"))
        odd = match1.get_odd(bet_type_slug=BetType.WDL,param="l",period=1)
        self.assertEquals(odd.__class__.__name__, OddWDL.__name__)
        self.assertEquals(odd.odd_value, Decimal("4.2"))
        odd = match1.get_odd(bet_type_slug=BetType.WDL,param="wd",period=1)
        self.assertEquals(odd.__class__.__name__, OddWDL.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.23"))
        odd = match1.get_odd(bet_type_slug=BetType.WDL,param="wl",period=1)
        self.assertEquals(odd.__class__.__name__, OddWDL.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.59"))
        odd = match1.get_odd(bet_type_slug=BetType.WDL,param="dl",period=1)
        self.assertEquals(odd.__class__.__name__, OddWDL.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.51"))
        #2nd half
        odd = match1.get_odd(bet_type_slug=BetType.WDL,param="w",period=2)
        self.assertEquals(odd.__class__.__name__, OddWDL.__name__)
        self.assertEquals(odd.odd_value, Decimal("2.17"))
        odd = match1.get_odd(bet_type_slug=BetType.WDL,param="d",period=2)
        self.assertEquals(odd.__class__.__name__, OddWDL.__name__)
        self.assertEquals(odd.odd_value, Decimal("2.75"))
        odd = match1.get_odd(bet_type_slug=BetType.WDL,param="l",period=2)
        self.assertEquals(odd.__class__.__name__, OddWDL.__name__)
        self.assertEquals(odd.odd_value, Decimal("3.9"))
        odd = match1.get_odd(bet_type_slug=BetType.WDL,param="wd",period=2)
        self.assertEquals(odd.__class__.__name__, OddWDL.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.21"))
        odd = match1.get_odd(bet_type_slug=BetType.WDL,param="wl",period=2)
        self.assertEquals(odd.__class__.__name__, OddWDL.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.39"))
        odd = match1.get_odd(bet_type_slug=BetType.WDL,param="dl",period=2)
        self.assertEquals(odd.__class__.__name__, OddWDL.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.61"))

        ####################################################################
        #Handicap
        ####################################################################
        odd = match1.get_odd(bet_type_slug=BetType.HANDICAP,team="h",period=0,param="-1.00")
        self.assertEquals(odd.__class__.__name__, OddHandicap.__name__)
        self.assertEquals(odd.odd_value, Decimal("2.60"))
        odd = match1.get_odd(bet_type_slug=BetType.HANDICAP,team="a",period=0,param="+1.00")
        self.assertEquals(odd.__class__.__name__, OddHandicap.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.55"))
        #1st half
        odd = match1.get_odd(bet_type_slug=BetType.HANDICAP,team="h",period=1,param="0")
        self.assertEquals(odd.__class__.__name__, OddHandicap.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.52"))
        odd = match1.get_odd(bet_type_slug=BetType.HANDICAP,team="h",period=1,param="-1.50")
        self.assertEquals(odd.__class__.__name__, OddHandicap.__name__)
        self.assertEquals(odd.odd_value, Decimal("6.9"))
        odd = match1.get_odd(bet_type_slug=BetType.HANDICAP,team="h",period=1,param="-1.00")
        self.assertEquals(odd.__class__.__name__, OddHandicap.__name__)
        self.assertEquals(odd.odd_value, Decimal("5.4"))
        odd = match1.get_odd(bet_type_slug=BetType.HANDICAP,team="a",period=1,param="0")
        self.assertEquals(odd.__class__.__name__, OddHandicap.__name__)
        self.assertEquals(odd.odd_value, Decimal("2.55"))
        odd = match1.get_odd(bet_type_slug=BetType.HANDICAP,team="a",period=1,param="+1.50")
        self.assertEquals(odd.__class__.__name__, OddHandicap.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.1"))
        odd = match1.get_odd(bet_type_slug=BetType.HANDICAP,team="a",period=1,param="+1.00")
        self.assertEquals(odd.__class__.__name__, OddHandicap.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.15"))
        #2-nd half
        odd = match1.get_odd(bet_type_slug=BetType.HANDICAP,team="h",period=2,param="0")
        self.assertEquals(odd.__class__.__name__, OddHandicap.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.45"))
        odd = match1.get_odd(bet_type_slug=BetType.HANDICAP,team="h",period=2,param="-1.50")
        self.assertEquals(odd.__class__.__name__, OddHandicap.__name__)
        self.assertEquals(odd.odd_value, Decimal("4.9"))
        odd = match1.get_odd(bet_type_slug=BetType.HANDICAP,team="h",period=2,param="-1.00")
        self.assertEquals(odd.__class__.__name__, OddHandicap.__name__)
        self.assertEquals(odd.odd_value, Decimal("3.8"))
        odd = match1.get_odd(bet_type_slug=BetType.HANDICAP,team="a",period=2,param="0")
        self.assertEquals(odd.__class__.__name__, OddHandicap.__name__)
        self.assertEquals(odd.odd_value, Decimal("2.6"))
        odd = match1.get_odd(bet_type_slug=BetType.HANDICAP,team="a",period=2,param="+1.50")
        self.assertEquals(odd.__class__.__name__, OddHandicap.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.16"))
        odd = match1.get_odd(bet_type_slug=BetType.HANDICAP,team="a",period=2,param="+1.00")
        self.assertEquals(odd.__class__.__name__, OddHandicap.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.25"))
        #Add. handicaps
        odd = match1.get_odd(bet_type_slug=BetType.HANDICAP,team="h",period=0,param="-2.50")
        self.assertEquals(odd.__class__.__name__, OddHandicap.__name__)
        self.assertEquals(odd.odd_value, Decimal("6.50"))
        odd = match1.get_odd(bet_type_slug=BetType.HANDICAP,team="h",period=0,param="-2.00")
        self.assertEquals(odd.__class__.__name__, OddHandicap.__name__)
        self.assertEquals(odd.odd_value, Decimal("5.70"))
        odd = match1.get_odd(bet_type_slug=BetType.HANDICAP,team="h",period=0,param="+1.00")
        self.assertEquals(odd.__class__.__name__, OddHandicap.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.10"))
        odd = match1.get_odd(bet_type_slug=BetType.HANDICAP,team="a",period=0,param="+2.50")
        self.assertEquals(odd.__class__.__name__, OddHandicap.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.11"))
        odd = match1.get_odd(bet_type_slug=BetType.HANDICAP,team="a",period=0,param="+2.00")
        self.assertEquals(odd.__class__.__name__, OddHandicap.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.14"))
        odd = match1.get_odd(bet_type_slug=BetType.HANDICAP,team="a",period=0,param="-1.00")
        self.assertEquals(odd.__class__.__name__, OddHandicap.__name__)
        self.assertEquals(odd.odd_value, Decimal("7.10"))

        ####################################################################
        #Total_Over
        ####################################################################
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_OVER,period=0,param="2.50")
        self.assertEquals(odd.__class__.__name__, OddTotalOver.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.74"))
        #1st half
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_OVER,period=1,param="1.00")
        self.assertEquals(odd.__class__.__name__, OddTotalOver.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.72"))
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_OVER,period=1,param="2.00")
        self.assertEquals(odd.__class__.__name__, OddTotalOver.__name__)
        self.assertEquals(odd.odd_value, Decimal("5.1"))
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_OVER,period=1,param="1.50")
        self.assertEquals(odd.__class__.__name__, OddTotalOver.__name__)
        self.assertEquals(odd.odd_value, Decimal("2.6"))
        #2nd half
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_OVER,period=2,param="1.50")
        self.assertEquals(odd.__class__.__name__, OddTotalOver.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.89"))
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_OVER,period=2,param="2.00")
        self.assertEquals(odd.__class__.__name__, OddTotalOver.__name__)
        self.assertEquals(odd.odd_value, Decimal("2.85"))
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_OVER,period=2,param="1.00")
        self.assertEquals(odd.__class__.__name__, OddTotalOver.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.32"))
        #Add. totals:
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_OVER,period=0,param="1.50")
        self.assertEquals(odd.__class__.__name__, OddTotalOver.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.23"))
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_OVER,period=0,param="2.75")
        self.assertEquals(odd.__class__.__name__, OddTotalOver.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.92"))
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_OVER,period=0,param="3.00")
        self.assertEquals(odd.__class__.__name__, OddTotalOver.__name__)
        self.assertEquals(odd.odd_value, Decimal("2.23"))
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_OVER,period=0,param="4.00")
        self.assertEquals(odd.__class__.__name__, OddTotalOver.__name__)
        self.assertEquals(odd.odd_value, Decimal("4.3"))

        ####################################################################
        #Total_Under
        ####################################################################
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_UNDER,period=0,param="2.50")
        self.assertEquals(odd.__class__.__name__, OddTotalUnder.__name__)
        self.assertEquals(odd.odd_value, Decimal("2.17"))
        #1st half
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_UNDER,period=1,param="1.00")
        self.assertEquals(odd.__class__.__name__, OddTotalUnder.__name__)
        self.assertEquals(odd.odd_value, Decimal("2.12"))
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_UNDER,period=1,param="2.00")
        self.assertEquals(odd.__class__.__name__, OddTotalUnder.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.17"))
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_UNDER,period=1,param="1.50")
        self.assertEquals(odd.__class__.__name__, OddTotalUnder.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.49"))
        #2nd half
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_UNDER,period=2,param="1.50")
        self.assertEquals(odd.__class__.__name__, OddTotalUnder.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.85"))
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_UNDER,period=2,param="2.00")
        self.assertEquals(odd.__class__.__name__, OddTotalUnder.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.39"))
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_UNDER,period=2,param="1.00")
        self.assertEquals(odd.__class__.__name__, OddTotalUnder.__name__)
        self.assertEquals(odd.odd_value, Decimal("3.2"))
        #Add. totals:
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_UNDER,period=0,param="1.50")
        self.assertEquals(odd.__class__.__name__, OddTotalUnder.__name__)
        self.assertEquals(odd.odd_value, Decimal("4.2"))
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_UNDER,period=0,param="2.75")
        self.assertEquals(odd.__class__.__name__, OddTotalUnder.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.94"))
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_UNDER,period=0,param="3.00")
        self.assertEquals(odd.__class__.__name__, OddTotalUnder.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.7"))
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_UNDER,period=0,param="4.00")
        self.assertEquals(odd.__class__.__name__, OddTotalUnder.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.22"))


        ####################################################################
        #ITotal_Over
        ####################################################################
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_OVER,team="h",period=0,param="1.50")
        self.assertEquals(odd.__class__.__name__, OddTotalOver.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.81"))
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_OVER,team="a",period=0,param="1.00")
        self.assertEquals(odd.__class__.__name__, OddTotalOver.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.88"))
        #Add. totals:
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_OVER,team="h",period=0,param="2.50")
        self.assertEquals(odd.__class__.__name__, OddTotalOver.__name__)
        self.assertEquals(odd.odd_value, Decimal("3.5"))
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_OVER,team="h",period=0,param="2.00")
        self.assertEquals(odd.__class__.__name__, OddTotalOver.__name__)
        self.assertEquals(odd.odd_value, Decimal("2.65"))
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_OVER,team="a",period=0,param="2.00")
        self.assertEquals(odd.__class__.__name__, OddTotalOver.__name__)
        self.assertEquals(odd.odd_value, Decimal("6"))
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_OVER,team="a",period=0,param="1.50")
        self.assertEquals(odd.__class__.__name__, OddTotalOver.__name__)
        self.assertEquals(odd.odd_value, Decimal("2.9"))

        ####################################################################
        #ITotal_Under
        ####################################################################
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_UNDER,team="h",period=0,param="1.50")
        self.assertEquals(odd.__class__.__name__, OddTotalUnder.__name__)
        self.assertEquals(odd.odd_value, Decimal("2.00"))
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_UNDER,team="a",period=0,param="1.00")
        self.assertEquals(odd.__class__.__name__, OddTotalUnder.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.92"))
        #Add. totals:
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_UNDER,team="h",period=0,param="2.50")
        self.assertEquals(odd.__class__.__name__, OddTotalUnder.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.3"))
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_UNDER,team="h",period=0,param="2.00")
        self.assertEquals(odd.__class__.__name__, OddTotalUnder.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.49"))
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_UNDER,team="a",period=0,param="2.00")
        self.assertEquals(odd.__class__.__name__, OddTotalUnder.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.13"))
        odd = match1.get_odd(bet_type_slug=BetType.TOTAL_UNDER,team="a",period=0,param="1.50")
        self.assertEquals(odd.__class__.__name__, OddTotalUnder.__name__)
        self.assertEquals(odd.odd_value, Decimal("1.42"))

        ####################################################################
        #Other
        ####################################################################
        # print("!!!")
        # for odd in Odd.objects.filter(match=match1, bet_type__slug=BetType.TOTAL_BOTH_HALVES_OVER, period=0, team=""):
        #     print("config="%s" param=%s yes=%s" % (odd.odd_bookie_config.name, odd.param, odd.yes)) 
        odd = Odd.objects.get(odd_bookie_config__name="Goal in first half yes", period=1, team="", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_OVER)
        self.assertEquals(odd.odd_value, Decimal("1.33"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal in second half yes", period=2, team="", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_OVER)
        self.assertEquals(odd.odd_value, Decimal("1.18"))
        odd = Odd.objects.get(odd_bookie_config__name="Goals both halves yes", period=0, team="", param="0.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_BOTH_HALVES_OVER)
        self.assertEquals(odd.odd_value, Decimal("1.63"))
        odd = Odd.objects.get(odd_bookie_config__name="Goals both halves no", period=0, team="", param="0.5", yes="N", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_BOTH_HALVES_OVER)
        self.assertEquals(odd.odd_value, Decimal("2.2"))

        # print("!!!")
        # for odd in Odd.objects.filter(match=match1, bet_type__slug=BetType.MARGIN, period=0, team="h"):
        #     print("config="%s" param=%s yes=%s" % (odd.odd_bookie_config.name, odd.param, odd.yes)) 
        odd = Odd.objects.get(odd_bookie_config__name="Winning margin 1 goal yes", period=0, team="h", param="1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.MARGIN)
        self.assertEquals(odd.odd_value, Decimal("3.75"))
        odd = Odd.objects.get(odd_bookie_config__name="Winning margin 1 goal no", period=0, team="h", param="1", yes="N", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.MARGIN)
        self.assertEquals(odd.odd_value, Decimal("1.25"))
        odd = Odd.objects.get(odd_bookie_config__name="Winning margin 1 goal yes", period=0, team="a", param="1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.MARGIN)
        self.assertEquals(odd.odd_value, Decimal("5.4"))
        odd = Odd.objects.get(odd_bookie_config__name="Winning margin 1 goal no", period=0, team="a", param="1", yes="N", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.MARGIN)
        self.assertEquals(odd.odd_value, Decimal("1.13"))
        odd = Odd.objects.get(odd_bookie_config__name="Winning margin 1 goal or draw yes", period=0, team="h", param="0,1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.MARGIN)
        self.assertEquals(odd.odd_value, Decimal("2"))
        odd = Odd.objects.get(odd_bookie_config__name="Winning margin 1 goal or draw no", period=0, team="h", param="0,1", yes="N", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.MARGIN)
        self.assertEquals(odd.odd_value, Decimal("1.76"))
        odd = Odd.objects.get(odd_bookie_config__name="Winning margin 1 goal or draw yes", period=0, team="a", param="0,1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.MARGIN)
        self.assertEquals(odd.odd_value, Decimal("2.37"))
        odd = Odd.objects.get(odd_bookie_config__name="Winning margin 1 goal or draw no", period=0, team="a", param="0,1", yes="N", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.MARGIN)
        self.assertEquals(odd.odd_value, Decimal("1.55"))

        odd = Odd.objects.get(odd_bookie_config__name="wins and over 2.5 yes", period=0, team="h", param="2.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.W_AND_TOTAL_OVER)
        self.assertEquals(odd.odd_value, Decimal("2.8"))
        odd = Odd.objects.get(odd_bookie_config__name="wins and under 2.5 yes", period=0, team="h", param="2.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.W_AND_TOTAL_UNDER)
        self.assertEquals(odd.odd_value, Decimal("5.1"))
        odd = Odd.objects.get(odd_bookie_config__name="wins and over 2.5 yes", period=0, team="a", param="2.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.W_AND_TOTAL_OVER)
        self.assertEquals(odd.odd_value, Decimal("5.9"))
        odd = Odd.objects.get(odd_bookie_config__name="wins and under 2.5 yes", period=0, team="a", param="2.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.W_AND_TOTAL_UNDER)
        self.assertEquals(odd.odd_value, Decimal("8.7"))
        odd = Odd.objects.get(odd_bookie_config__name="won't lose and over 2.5 yes", period=0, team="h", param="2.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.WD_AND_TOTAL_OVER)
        self.assertEquals(odd.odd_value, Decimal("2.31"))
        odd = Odd.objects.get(odd_bookie_config__name="won't lose and under 2.5 yes", period=0, team="h", param="2.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.WD_AND_TOTAL_UNDER)
        self.assertEquals(odd.odd_value, Decimal("2.75"))
        odd = Odd.objects.get(odd_bookie_config__name="won't lose and over 2.5 yes", period=0, team="a", param="2.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.WD_AND_TOTAL_OVER)
        self.assertEquals(odd.odd_value, Decimal("4.1"))
        odd = Odd.objects.get(odd_bookie_config__name="won't lose and under 2.5 yes", period=0, team="a", param="2.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.WD_AND_TOTAL_UNDER)
        self.assertEquals(odd.odd_value, Decimal("3.55"))

        odd = Odd.objects.get(odd_bookie_config__name="wins both halves yes", period=0, team="h", param="", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.WIN_BOTH)
        self.assertEquals(odd.odd_value, Decimal("5.1"))
        odd = Odd.objects.get(odd_bookie_config__name="wins both halves no", period=0, team="h", param="", yes="N", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.WIN_BOTH)
        self.assertEquals(odd.odd_value, Decimal("1.15"))
        with self.assertRaises(Odd.DoesNotExist):
            odd = Odd.objects.get(odd_bookie_config__name="wins both halves yes", period=0, team="a", param="", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        with self.assertRaises(Odd.DoesNotExist):
            odd = Odd.objects.get(odd_bookie_config__name="wins both halves no", period=0, team="a", param="", yes="N", match=match1, value_type__slug=ValueType.MAIN)

        odd = Odd.objects.get(odd_bookie_config__name="wins at least one half yes", period=0, team="h", param="", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.WIN_LEAST_ONE_HALF)
        self.assertEquals(odd.odd_value, Decimal("1.47"))
        odd = Odd.objects.get(odd_bookie_config__name="wins at least one half no", period=0, team="h", param="", yes="N", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.WIN_LEAST_ONE_HALF)
        self.assertEquals(odd.odd_value, Decimal("2.55"))
        odd = Odd.objects.get(odd_bookie_config__name="wins at least one half yes", period=0, team="a", param="", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.WIN_LEAST_ONE_HALF)
        self.assertEquals(odd.odd_value, Decimal("2.3"))
        odd = Odd.objects.get(odd_bookie_config__name="wins at least one half no", period=0, team="a", param="", yes="N", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.WIN_LEAST_ONE_HALF)
        self.assertEquals(odd.odd_value, Decimal("1.58"))

        odd = Odd.objects.get(odd_bookie_config__name="to win to nil yes", period=0, team="h", param="", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.WIN_TO_NIL)
        self.assertEquals(odd.odd_value, Decimal("3.4"))
        odd = Odd.objects.get(odd_bookie_config__name="to win to nil no", period=0, team="h", param="", yes="N", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.WIN_TO_NIL)
        self.assertEquals(odd.odd_value, Decimal("1.29"))
        odd = Odd.objects.get(odd_bookie_config__name="to win to nil yes", period=0, team="a", param="", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.WIN_TO_NIL)
        self.assertEquals(odd.odd_value, Decimal("6.6"))
        with self.assertRaises(Odd.DoesNotExist):
            odd = Odd.objects.get(odd_bookie_config__name="to win to nil no", period=0, team="a", param="", yes="N", match=match1, value_type__slug=ValueType.MAIN)

        odd = Odd.objects.get(odd_bookie_config__name="Total even", period=0, team="", param="even", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_EVEN_ODD)
        self.assertEquals(odd.odd_value, Decimal("1.92"))
        odd = Odd.objects.get(odd_bookie_config__name="Total odd", period=0, team="", param="odd", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_EVEN_ODD)
        self.assertEquals(odd.odd_value, Decimal("1.94"))

        odd = Odd.objects.get(odd_bookie_config__name="To score over 1,5 goals both", period=0, team="", param="1.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.ITOTAL_BOTH_OVER)
        self.assertEquals(odd.odd_value, Decimal("5.3"))
        odd = Odd.objects.get(odd_bookie_config__name="To score over 1,5 goals only", period=0, team="h", param="1.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.ITOTAL_ONLY_OVER)
        self.assertEquals(odd.odd_value, Decimal("2.65"))
        odd = Odd.objects.get(odd_bookie_config__name="To score over 1,5 goals only", period=0, team="a", param="1.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.ITOTAL_ONLY_OVER)
        self.assertEquals(odd.odd_value, Decimal("5.9"))
        odd = Odd.objects.get(odd_bookie_config__name="To score over 1,5 goals Neither Team", period=0, team="", param="1.5", yes="N", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.ITOTAL_ONLY_OVER)
        self.assertEquals(odd.odd_value, Decimal("2.9"))

        with self.assertRaises(Odd.DoesNotExist):
            odd = Odd.objects.get(odd_bookie_config__name="Both teams to score at 1st half - 2nd half", period=0, team="", param="1\\1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        odd = Odd.objects.get(odd_bookie_config__name="Both teams to score at 1st half - 2nd half", period=0, team="", param="1\\0", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.BOTH_TO_SCORE_AT_1_2)
        self.assertEquals(odd.odd_value, Decimal("6.2"))
        odd = Odd.objects.get(odd_bookie_config__name="Both teams to score at 1st half - 2nd half", period=0, team="", param="0\\1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.BOTH_TO_SCORE_AT_1_2)
        self.assertEquals(odd.odd_value, Decimal("3.8"))
        odd = Odd.objects.get(odd_bookie_config__name="Both teams to score at 1st half - 2nd half", period=0, team="", param="0\\0", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.BOTH_TO_SCORE_AT_1_2)
        self.assertEquals(odd.odd_value, Decimal("1.73"))

        odd = Odd.objects.get(odd_bookie_config__name="Both teams to score and either team to win yes", period=0, team="", param="0.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.ITOTAL_BOTH_OVER_AND_EITHER_WIN)
        self.assertEquals(odd.odd_value, Decimal("2.41"))
        odd = Odd.objects.get(odd_bookie_config__name="Both teams to score and either team to win no", period=0, team="", param="0.5", yes="N", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.ITOTAL_BOTH_OVER_AND_EITHER_WIN)
        self.assertEquals(odd.odd_value, Decimal("1.57"))

        # print("!!!")
        # for odd in Odd.objects.filter(match=match1, bet_type__slug=BetType.TOTAL_UNDER, period=1, team="", param="0.50"):
        #     print("config="%s" param=%s yes=%s value=%s" % (odd.odd_bookie_config.name, odd.param, odd.yes, odd.odd_value)) 
        odd = Odd.objects.get(odd_bookie_config__name="To score first in the 1st half", period=1, team="h", param="1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.RACE_TO_GOALS)
        self.assertEquals(odd.odd_value, Decimal("2.3"))
        with self.assertRaises(Odd.DoesNotExist):
            odd = Odd.objects.get(odd_bookie_config__name="To score first in the 1st half No Goal", period=1, team="", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        odd = Odd.objects.get(odd_bookie_config__name="To score first in the 1st half", period=1, team="a", param="1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.RACE_TO_GOALS)
        self.assertEquals(odd.odd_value, Decimal("3.4"))
        odd = Odd.objects.get(odd_bookie_config__name="To score first in the 2nd half", period=2, team="h", param="1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.RACE_TO_GOALS)
        self.assertEquals(odd.odd_value, Decimal("1.99"))
        with self.assertRaises(Odd.DoesNotExist):
            odd = Odd.objects.get(odd_bookie_config__name="To score first in the 2nd half No Goal", period=2, team="", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        odd = Odd.objects.get(odd_bookie_config__name="To score first in the 2nd half", period=2, team="a", param="1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.RACE_TO_GOALS)
        self.assertEquals(odd.odd_value, Decimal("3.05"))

        odd = Odd.objects.get(odd_bookie_config__name="1st goal in the match to score", period=0, team="h", param="1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.RACE_TO_GOALS)
        self.assertEquals(odd.odd_value, Decimal("1.67"))
        with self.assertRaises(Odd.DoesNotExist):
            odd = Odd.objects.get(odd_bookie_config__name="1st goal in the match to score no goal", period=0, team="", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        odd = Odd.objects.get(odd_bookie_config__name="1st goal in the match to score", period=0, team="a", param="1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.RACE_TO_GOALS)
        self.assertEquals(odd.odd_value, Decimal("2.5"))

        # print("!!!")
        # for odd in Odd.objects.filter(match=match1, bet_type__slug=BetType.HALF_TO_SCORE_FIRST_GOAL, period=0, team="h"):
        #     print("config="%s" param=%s yes=%s value=%s" % (odd.odd_bookie_config.name, odd.param, odd.yes, odd.odd_value)) 
        odd = Odd.objects.get(odd_bookie_config__name="to score its first goal 1st half", period=0, team="h", param="1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.HALF_TO_SCORE_FIRST_GOAL)
        self.assertEquals(odd.odd_value, Decimal("1.78"))
        odd = Odd.objects.get(odd_bookie_config__name="to score its first goal 2nd half", period=0, team="h", param="2", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.HALF_TO_SCORE_FIRST_GOAL)
        self.assertEquals(odd.odd_value, Decimal("3.25"))
        odd = Odd.objects.get(odd_bookie_config__name="to score its first goal 1st half", period=0, team="a", param="1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.HALF_TO_SCORE_FIRST_GOAL)
        self.assertEquals(odd.odd_value, Decimal("2.33"))
        odd = Odd.objects.get(odd_bookie_config__name="to score its first goal 2nd half", period=0, team="a", param="2", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.HALF_TO_SCORE_FIRST_GOAL)
        self.assertEquals(odd.odd_value, Decimal("3.3"))

        odd = Odd.objects.get(odd_bookie_config__name="Time of 1st goal 1 st to 15th minute", period=0, team="", param="15", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TIME_TO_SCORE_FIRST_GOAL)
        self.assertEquals(odd.odd_value, Decimal("2.95"))
        odd = Odd.objects.get(odd_bookie_config__name="Time of 1st goal 16th to 30th minute", period=0, team="", param="30", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TIME_TO_SCORE_FIRST_GOAL)
        self.assertEquals(odd.odd_value, Decimal("3.9"))
        odd = Odd.objects.get(odd_bookie_config__name="Time of 1st goal 31 st minute to half time", period=0, team="", param="45", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TIME_TO_SCORE_FIRST_GOAL)
        self.assertEquals(odd.odd_value, Decimal("5.2"))
        odd = Odd.objects.get(odd_bookie_config__name="Time of 1st goal 46th to full time", period=0, team="", param="2", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.HALF_TO_SCORE_FIRST_GOAL)
        self.assertEquals(odd.odd_value, Decimal("3.95"))

        odd = Odd.objects.get(odd_bookie_config__name="At least one team to score 2 or more goals yes", period=0, team="", param="1.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.ITOTAL_AT_LEAST_OVER)
        self.assertEquals(odd.odd_value, Decimal("1.42"))
        odd = Odd.objects.get(odd_bookie_config__name="At least one team to score 2 or more goals no", period=0, team="", param="1.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.ITOTAL_BOTH_UNDER)
        self.assertEquals(odd.odd_value, Decimal("2.85"))
        odd = Odd.objects.get(odd_bookie_config__name="At least one team to score 3 or more goals yes", period=0, team="", param="2.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.ITOTAL_AT_LEAST_OVER)
        self.assertEquals(odd.odd_value, Decimal("2.7"))
        odd = Odd.objects.get(odd_bookie_config__name="At least one team to score 3 or more goals no", period=0, team="", param="2.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.ITOTAL_BOTH_UNDER)
        self.assertEquals(odd.odd_value, Decimal("1.45"))

        odd = Odd.objects.get(odd_bookie_config__name="15 Minutes Betting win", period=15, team="", param="w", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.WDL_MINUTE)
        self.assertEquals(odd.odd_value, Decimal("5.2"))
        odd = Odd.objects.get(odd_bookie_config__name="15 Minutes Betting draw", period=15, team="", param="d", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.WDL_MINUTE)
        self.assertEquals(odd.odd_value, Decimal("1.33"))
        odd = Odd.objects.get(odd_bookie_config__name="15 Minutes Betting lose", period=15, team="", param="l", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.WDL_MINUTE)
        self.assertEquals(odd.odd_value, Decimal("7.7"))
        odd = Odd.objects.get(odd_bookie_config__name="30 Minutes Betting win", period=30, team="", param="w", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.WDL_MINUTE)
        self.assertEquals(odd.odd_value, Decimal("3.2"))
        odd = Odd.objects.get(odd_bookie_config__name="30 Minutes Betting draw", period=30, team="", param="d", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.WDL_MINUTE)
        self.assertEquals(odd.odd_value, Decimal("1.8"))
        odd = Odd.objects.get(odd_bookie_config__name="30 Minutes Betting lose", period=30, team="", param="l", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.WDL_MINUTE)
        self.assertEquals(odd.odd_value, Decimal("5"))
        odd = Odd.objects.get(odd_bookie_config__name="60 Minutes Betting win", period=60, team="", param="w", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.WDL_MINUTE)
        self.assertEquals(odd.odd_value, Decimal("2.18"))
        odd = Odd.objects.get(odd_bookie_config__name="60 Minutes Betting draw", period=60, team="", param="d", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.WDL_MINUTE)
        self.assertEquals(odd.odd_value, Decimal("2.85"))
        odd = Odd.objects.get(odd_bookie_config__name="60 Minutes Betting lose", period=60, team="", param="l", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.WDL_MINUTE)
        self.assertEquals(odd.odd_value, Decimal("3.85"))
        odd = Odd.objects.get(odd_bookie_config__name="75 Minutes Betting win", period=75, team="", param="w", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.WDL_MINUTE)
        self.assertEquals(odd.odd_value, Decimal("1.99"))
        odd = Odd.objects.get(odd_bookie_config__name="75 Minutes Betting draw", period=75, team="", param="d", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.WDL_MINUTE)
        self.assertEquals(odd.odd_value, Decimal("3.35"))
        odd = Odd.objects.get(odd_bookie_config__name="75 Minutes Betting lose", period=75, team="", param="l", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.WDL_MINUTE)
        self.assertEquals(odd.odd_value, Decimal("3.7"))

        odd = Odd.objects.get(odd_bookie_config__name="Goal to be scored from 1st till 15th minute? yes", period=15, team="", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_OVER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("2.95"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal to be scored from 1st till 15th minute? no", period=15, team="", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_UNDER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("1.37"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal to be scored from 16th till 30th minute? yes", period=30, team="", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_OVER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("2.65"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal to be scored from 16th till 30th minute? no", period=30, team="", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_UNDER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("1.44"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal to be scored from 31st minute till Half Time? yes", period=45, team="", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_OVER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("2.41"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal to be scored from 31st minute till Half Time? no", period=45, team="", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_UNDER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("1.52"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal to be scored from 46th till 60th minute? yes", period=60, team="", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_OVER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("2.35"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal to be scored from 46th till 60th minute? no", period=60, team="", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_UNDER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("1.55"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal to be scored from 61st to 75th minute? yes", period=75, team="", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_OVER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("2.3"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal to be scored from 61st to 75th minute? no", period=75, team="", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_UNDER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("1.58"))
        odd = Odd.objects.get(odd_bookie_config__name="Match goal - 76th minute to Full Time? yes", period=90, team="", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_OVER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("1.94"))
        odd = Odd.objects.get(odd_bookie_config__name="Match goal - 76th minute to Full Time? no", period=90, team="", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_UNDER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("1.8"))

        odd = Odd.objects.get(odd_bookie_config__name="Goal - from 1st to 15th minute? yes", period=15, team="h", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_OVER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("4.3"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal - from 1st to 15th minute? no", period=15, team="h", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_UNDER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("1.19"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal - from 16th to 30th minute? yes", period=30, team="h", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_OVER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("3.9"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal - from 16th to 30th minute? no", period=30, team="h", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_UNDER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("1.23"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal - from 31st minute to Half Time? yes", period=45, team="h", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_OVER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("3.55"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal - from 31st minute to Half Time? no", period=45, team="h", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_UNDER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("1.27"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal - from 46th to 60th Minute? yes", period=60, team="h", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_OVER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("3.4"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal - from 46th to 60th Minute? no", period=60, team="h", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_UNDER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("1.29"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal - from 61st to 75th minute? yes", period=75, team="h", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_OVER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("3.3"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal - from 61st to 75th minute? no", period=75, team="h", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_UNDER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("1.3"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal - from 76th minute to Full Time? yes", period=90, team="h", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_OVER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("2.75"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal - from 76th minute to Full Time? no", period=90, team="h", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_UNDER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("1.42"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal - from 1st to 15th minute? yes", period=15, team="a", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_OVER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("5.9"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal - from 1st to 15th minute? no", period=15, team="a", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_UNDER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("1.11"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal - from 16th to 30th minute? yes", period=30, team="a", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_OVER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("5.3"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal - from 16th to 30th minute? no", period=30, team="a", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_UNDER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("1.13"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal - from 31st minute to Half Time? yes", period=45, team="a", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_OVER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("4.8"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal - from 31st minute to Half Time? no", period=45, team="a", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_UNDER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("1.16"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal - from 46th to 60th Minute? yes", period=60, team="a", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_OVER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("4.7"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal - from 46th to 60th Minute? no", period=60, team="a", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_UNDER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("1.17"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal - from 61st to 75th minute? yes", period=75, team="a", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_OVER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("4.6"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal - from 61st to 75th minute? no", period=75, team="a", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_UNDER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("1.17"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal - from 76th minute to Full Time? yes", period=90, team="a", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_OVER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("3.8"))
        odd = Odd.objects.get(odd_bookie_config__name="Goal - from 76th minute to Full Time? no", period=90, team="a", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_UNDER_MINUTES)
        self.assertEquals(odd.odd_value, Decimal("1.23"))

        odd = Odd.objects.get(odd_bookie_config__name="1st Half Result / 2nd Half Result", period=0, team="", param="1/1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.RESULT_HALF1_HALF2)
        self.assertEquals(odd.odd_value, Decimal("5.1"))
        odd = Odd.objects.get(odd_bookie_config__name="1st Half Result / 2nd Half Result", period=0, team="", param="1/X", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.RESULT_HALF1_HALF2)
        self.assertEquals(odd.odd_value, Decimal("7.8"))
        odd = Odd.objects.get(odd_bookie_config__name="1st Half Result / 2nd Half Result", period=0, team="", param="1/2", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.RESULT_HALF1_HALF2)
        self.assertEquals(odd.odd_value, Decimal("9.1"))
        odd = Odd.objects.get(odd_bookie_config__name="1st Half Result / 2nd Half Result", period=0, team="", param="X/1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.RESULT_HALF1_HALF2)
        self.assertEquals(odd.odd_value, Decimal("4.9"))
        odd = Odd.objects.get(odd_bookie_config__name="1st Half Result / 2nd Half Result", period=0, team="", param="X/X", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.RESULT_HALF1_HALF2)
        self.assertEquals(odd.odd_value, Decimal("6.2"))
        odd = Odd.objects.get(odd_bookie_config__name="1st Half Result / 2nd Half Result", period=0, team="", param="X/2", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.RESULT_HALF1_HALF2)
        self.assertEquals(odd.odd_value, Decimal("8.7"))
        odd = Odd.objects.get(odd_bookie_config__name="1st Half Result / 2nd Half Result", period=0, team="", param="2/1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.RESULT_HALF1_HALF2)
        self.assertEquals(odd.odd_value, Decimal("9.2"))
        with self.assertRaises(Odd.DoesNotExist):
            odd = Odd.objects.get(odd_bookie_config__name="1st Half Result / 2nd Half Result", period=0, team="", param="2/X", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        with self.assertRaises(Odd.DoesNotExist):
            odd = Odd.objects.get(odd_bookie_config__name="1st Half Result / 2nd Half Result", period=0, team="", param="2/2", yes="Y", match=match1, value_type__slug=ValueType.MAIN)

        odd = Odd.objects.get(odd_bookie_config__name="Match result / Total match goals 3.5 win over", period=0, team="h", param="3.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.W_AND_TOTAL_OVER)
        self.assertEquals(odd.odd_value, Decimal("4.7"))
        odd = Odd.objects.get(odd_bookie_config__name="Match result / Total match goals 3.5 win under", period=0, team="h", param="3.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.W_AND_TOTAL_UNDER)
        self.assertEquals(odd.odd_value, Decimal("2.85"))
        odd = Odd.objects.get(odd_bookie_config__name="Match result / Total match goals 3.5 win or draw over", period=0, team="a", param="3.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.WD_AND_TOTAL_OVER)
        self.assertEquals(odd.odd_value, Decimal("6.1"))
        odd = Odd.objects.get(odd_bookie_config__name="Match result / Total match goals 3.5 win or draw under", period=0, team="a", param="3.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.WD_AND_TOTAL_UNDER)
        self.assertEquals(odd.odd_value, Decimal("2.7"))
        odd = Odd.objects.get(odd_bookie_config__name="Match result / Total match goals 3.5 win or draw over", period=0, team="h", param="3.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.WD_AND_TOTAL_OVER)
        self.assertEquals(odd.odd_value, Decimal("3.5"))
        odd = Odd.objects.get(odd_bookie_config__name="Match result / Total match goals 3.5 win or draw under", period=0, team="h", param="3.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.WD_AND_TOTAL_UNDER)
        self.assertEquals(odd.odd_value, Decimal("1.92"))
        with self.assertRaises(Odd.DoesNotExist):
            odd = Odd.objects.get(odd_bookie_config__name="Match result / Total match goals 3.5 win over", period=0, team="a", param="3.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        odd = Odd.objects.get(odd_bookie_config__name="Match result / Total match goals 3.5 win under", period=0, team="a", param="3.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.W_AND_TOTAL_UNDER)
        self.assertEquals(odd.odd_value, Decimal("5"))

        odd = Odd.objects.get(odd_bookie_config__name="Match result and both teams to score", period=0, team="", param="w", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.WDL_AND_BOTH_TEAMS_SCORE)
        self.assertEquals(odd.odd_value, Decimal("3.5"))
        odd = Odd.objects.get(odd_bookie_config__name="Match result and both teams to score", period=0, team="", param="d", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.WDL_AND_BOTH_TEAMS_SCORE)
        self.assertEquals(odd.odd_value, Decimal("4.8"))
        odd = Odd.objects.get(odd_bookie_config__name="Match result and both teams to score", period=0, team="", param="l", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.WDL_AND_BOTH_TEAMS_SCORE)
        self.assertEquals(odd.odd_value, Decimal("6.4"))

        with self.assertRaises(Odd.DoesNotExist):
            odd = Odd.objects.get(odd_bookie_config__name="Total match goals none", period=0, team="", param="0", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        odd = Odd.objects.get(odd_bookie_config__name="Total match goals one", period=0, team="", param="1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("5.7"))
        odd = Odd.objects.get(odd_bookie_config__name="Total match goals two", period=0, team="", param="2", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("3.95"))
        odd = Odd.objects.get(odd_bookie_config__name="Total match goals three", period=0, team="", param="3", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("4.1"))
        odd = Odd.objects.get(odd_bookie_config__name="Total match goals four", period=0, team="", param="4", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("5.5"))
        odd = Odd.objects.get(odd_bookie_config__name="Total match goals five", period=0, team="", param="5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("9"))
        with self.assertRaises(Odd.DoesNotExist):
            odd = Odd.objects.get(odd_bookie_config__name="Total match goals six", period=0, team="", param="6", yes="Y", match=match1, value_type__slug=ValueType.MAIN)

        # print("!!!")
        # for odd in Odd.objects.filter(match=match1, bet_type__slug=BetType.TOTAL, period=0, team="h"):
        #     print("config="%s" param=%s yes=%s value=%s" % (odd.odd_bookie_config.name, odd.param, odd.yes, odd.odd_value)) 
        odd = Odd.objects.get(odd_bookie_config__name="Total goals 0 goals", period=0, team="h", param="0", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("5"))
        odd = Odd.objects.get(odd_bookie_config__name="Total goals 1 goal", period=0, team="h", param="1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("3.05"))
        odd = Odd.objects.get(odd_bookie_config__name="Total goals 2 goals", period=0, team="h", param="2", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("3.45"))
        odd = Odd.objects.get(odd_bookie_config__name="Total goals 3 goals", period=0, team="h", param="3", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("5.7"))
        odd = Odd.objects.get(odd_bookie_config__name="Total goals 4 or more goals", period=0, team="h", param="3.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_OVER)
        self.assertEquals(odd.odd_value, Decimal("8.4"))
        odd = Odd.objects.get(odd_bookie_config__name="Total goals 0 goals", period=0, team="a", param="0", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("2.95"))
        odd = Odd.objects.get(odd_bookie_config__name="Total goals 1 goal", period=0, team="a", param="1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("2.55"))
        odd = Odd.objects.get(odd_bookie_config__name="Total goals 2 goals", period=0, team="a", param="2", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("4.3"))
        odd = Odd.objects.get(odd_bookie_config__name="Total goals 3 goals", period=0, team="a", param="3", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("10"))
        with self.assertRaises(Odd.DoesNotExist):
            odd = Odd.objects.get(odd_bookie_config__name="Total goals 4 or more goals", period=0, team="a", param="3.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)

        with self.assertRaises(Odd.DoesNotExist):
            odd = Odd.objects.get(odd_bookie_config__name="Correct score X", period=0, team="", param="0:0", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        odd = Odd.objects.get(odd_bookie_config__name="Correct score X", period=0, team="", param="1:1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.CORRECT_SCORE)
        self.assertEquals(odd.odd_value, Decimal("7.5"))
        odd = Odd.objects.get(odd_bookie_config__name="Correct score 1", period=0, team="", param="1:0", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.CORRECT_SCORE)
        self.assertEquals(odd.odd_value, Decimal("8.6"))
        odd = Odd.objects.get(odd_bookie_config__name="Correct score 1", period=0, team="", param="2:0", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.CORRECT_SCORE)
        self.assertEquals(odd.odd_value, Decimal("9.7"))
        odd = Odd.objects.get(odd_bookie_config__name="Correct score 1", period=0, team="", param="2:1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.CORRECT_SCORE)
        self.assertEquals(odd.odd_value, Decimal("8.5"))
        with self.assertRaises(Odd.DoesNotExist):
            odd = Odd.objects.get(odd_bookie_config__name="Correct score 1", period=0, team="", param="3:0", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        with self.assertRaises(Odd.DoesNotExist):
            odd = Odd.objects.get(odd_bookie_config__name="Correct score 2", period=0, team="", param="0:1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)

        odd = Odd.objects.get(odd_bookie_config__name="Correct Score (Multiscore)", period=0, team="", param="1:0,2:0,2:1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.CORRECT_SCORE)
        self.assertEquals(odd.odd_value, Decimal("3.25"))
        odd = Odd.objects.get(odd_bookie_config__name="Correct Score (Multiscore)", period=0, team="", param="0:1,0:2,1:2", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.CORRECT_SCORE)
        self.assertEquals(odd.odd_value, Decimal("5.3"))
        odd = Odd.objects.get(odd_bookie_config__name="Correct Score (Multiscore)", period=0, team="", param="3:0,3:1,3:2", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.CORRECT_SCORE)
        self.assertEquals(odd.odd_value, Decimal("6.2"))
        with self.assertRaises(Odd.DoesNotExist):
            odd = Odd.objects.get(odd_bookie_config__name="Correct Score (Multiscore)", period=0, team="", param="0:3,1:3,2:3", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        odd = Odd.objects.get(odd_bookie_config__name="Correct Score (Multiscore)", period=0, team="", param="0:0,1:1,2:2,3:3", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.CORRECT_SCORE)
        self.assertEquals(odd.odd_value, Decimal("3.8"))

        odd = Odd.objects.get(odd_bookie_config__name="At least one team to score 4 or more goals yes", period=0, team="", param="3.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.ITOTAL_AT_LEAST_OVER)
        self.assertEquals(odd.odd_value, Decimal("6.6"))

        odd = Odd.objects.get(odd_bookie_config__name="Match result to win in 1 or 2 goals", period=0, team="h", param="1,2", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.MARGIN)
        self.assertEquals(odd.odd_value, Decimal("2.5"))
        odd = Odd.objects.get(odd_bookie_config__name="Match result to win in 1 or 2 goals", period=0, team="a", param="1,2", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.MARGIN)
        self.assertEquals(odd.odd_value, Decimal("4.3"))

        # print("!!!")
        # for odd in Odd.objects.filter(match=match1, bet_type__slug=BetType.RACE_TO_GOALS, period=0, param="2"):
        #     print("config="%s" team=%s param=%s yes=%s value=%s" % (odd.odd_bookie_config.name, odd.team, odd.param, odd.yes, odd.odd_value)) 
        odd = Odd.objects.get(odd_bookie_config__name="Race to 2 goals", period=0, team="h", param="2", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.RACE_TO_GOALS)
        self.assertEquals(odd.odd_value, Decimal("2.14"))
        # odd = Odd.objects.get(odd_bookie_config__name="Race to 2 goals", period=0, team="", param="2", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        # self.assertEquals(odd.bet_type.slug, BetType.RACE_TO_GOALS)
        # self.assertEquals(odd.odd_value, Decimal("2.9"))
        odd = Odd.objects.get(odd_bookie_config__name="Race to 2 goals", period=0, team="a", param="2", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.RACE_TO_GOALS)
        self.assertEquals(odd.odd_value, Decimal("3.9"))
        odd = Odd.objects.get(odd_bookie_config__name="Race to 3 goals", period=0, team="h", param="3", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.RACE_TO_GOALS)
        self.assertEquals(odd.odd_value, Decimal("3.9"))
        # odd = Odd.objects.get(odd_bookie_config__name="Race to 3 goals", period=0, team="", param="3", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        # self.assertEquals(odd.bet_type.slug, BetType.RACE_TO_GOALS)
        # self.assertEquals(odd.odd_value, Decimal("1.45"))
        odd = Odd.objects.get(odd_bookie_config__name="Race to 3 goals", period=0, team="a", param="3", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.RACE_TO_GOALS)
        self.assertEquals(odd.odd_value, Decimal("8"))

        odd = Odd.objects.get(odd_bookie_config__name="goals even", period=0, team="h", param="even", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_EVEN_ODD)
        self.assertEquals(odd.odd_value, Decimal("1.85"))
        odd = Odd.objects.get(odd_bookie_config__name="goals odd", period=0, team="h", param="odd", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_EVEN_ODD)
        self.assertEquals(odd.odd_value, Decimal("1.95"))
        odd = Odd.objects.get(odd_bookie_config__name="goals even", period=0, team="a", param="even", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_EVEN_ODD)
        self.assertEquals(odd.odd_value, Decimal("1.74"))
        odd = Odd.objects.get(odd_bookie_config__name="goals odd", period=0, team="a", param="odd", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_EVEN_ODD)
        self.assertEquals(odd.odd_value, Decimal("2.1"))

        odd = Odd.objects.get(odd_bookie_config__name="Total Goals / Both teams to score Over&Yes", period=0, team="", param="2.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.BOTH_TO_SCORE_AND_TOTAL_OVER)
        self.assertEquals(odd.odd_value, Decimal("2.08"))
        odd = Odd.objects.get(odd_bookie_config__name="Total Goals / Both teams to score Over&No", period=0, team="", param="2.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.NOT_BOTH_TO_SCORE_AND_TOTAL_OVER)
        self.assertEquals(odd.odd_value, Decimal("8.6"))
        odd = Odd.objects.get(odd_bookie_config__name="Total Goals / Both teams to score Under&Yes", period=0, team="", param="2.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.BOTH_TO_SCORE_AND_TOTAL_UNDER)
        self.assertEquals(odd.odd_value, Decimal("7.5"))
        odd = Odd.objects.get(odd_bookie_config__name="Total Goals / Both teams to score Under&No", period=0, team="", param="2.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.NOT_BOTH_TO_SCORE_AND_TOTAL_UNDER)
        self.assertEquals(odd.odd_value, Decimal("2.85"))
        odd = Odd.objects.get(odd_bookie_config__name="Total Goals / Both teams to score Over&Yes", period=0, team="", param="3.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.BOTH_TO_SCORE_AND_TOTAL_OVER)
        self.assertEquals(odd.odd_value, Decimal("3.15"))
        with self.assertRaises(Odd.DoesNotExist):
            odd = Odd.objects.get(odd_bookie_config__name="Total Goals / Both teams to score Over&No", period=0, team="", param="3.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        odd = Odd.objects.get(odd_bookie_config__name="Total Goals / Both teams to score Under&Yes", period=0, team="", param="3.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.BOTH_TO_SCORE_AND_TOTAL_UNDER)
        self.assertEquals(odd.odd_value, Decimal("3.45"))
        odd = Odd.objects.get(odd_bookie_config__name="Total Goals / Both teams to score Under&No", period=0, team="", param="3.5", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.NOT_BOTH_TO_SCORE_AND_TOTAL_UNDER)
        self.assertEquals(odd.odd_value, Decimal("2.39"))

        odd = Odd.objects.get(odd_bookie_config__name="to score 1 or 2 goals yes", period=0, team="h", param="1,2", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("1.68"))
        odd = Odd.objects.get(odd_bookie_config__name="to score 1 or 2 goals no", period=0, team="h", param="1,2", yes="N", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("2.18"))
        odd = Odd.objects.get(odd_bookie_config__name="to score 1 or 2 goals yes", period=0, team="a", param="1,2", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("1.67"))
        odd = Odd.objects.get(odd_bookie_config__name="to score 1 or 2 goals no", period=0, team="a", param="1,2", yes="N", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("2.21"))
        odd = Odd.objects.get(odd_bookie_config__name="to score 2 or 3 goals yes", period=0, team="h", param="2,3", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("2.23"))
        odd = Odd.objects.get(odd_bookie_config__name="to score 2 or 3 goals no", period=0, team="h", param="2,3", yes="N", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("1.66"))
        odd = Odd.objects.get(odd_bookie_config__name="to score 2 or 3 goals yes", period=0, team="a", param="2,3", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("3.15"))
        odd = Odd.objects.get(odd_bookie_config__name="to score 2 or 3 goals no", period=0, team="a", param="2,3", yes="N", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("1.36"))

        odd = Odd.objects.get(odd_bookie_config__name="to score two consecutive goals yes", period=0, team="h", param="2", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.CONSECUTIVE_GOALS)
        self.assertEquals(odd.odd_value, Decimal("2.15"))
        odd = Odd.objects.get(odd_bookie_config__name="to score two consecutive goals no", period=0, team="h", param="2", yes="N", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.CONSECUTIVE_GOALS)
        self.assertEquals(odd.odd_value, Decimal("1.7"))
        odd = Odd.objects.get(odd_bookie_config__name="to score two consecutive goals yes", period=0, team="a", param="2", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.CONSECUTIVE_GOALS)
        self.assertEquals(odd.odd_value, Decimal("3.9"))
        odd = Odd.objects.get(odd_bookie_config__name="to score two consecutive goals no", period=0, team="a", param="2", yes="N", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.CONSECUTIVE_GOALS)
        self.assertEquals(odd.odd_value, Decimal("1.25"))
        odd = Odd.objects.get(odd_bookie_config__name="At least one team to score 2 consecutive goals yes", period=0, team="", param="2", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.CONSECUTIVE_GOALS)
        self.assertEquals(odd.odd_value, Decimal("1.6"))
        odd = Odd.objects.get(odd_bookie_config__name="At least one team to score 2 consecutive goals no", period=0, team="", param="2", yes="N", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.CONSECUTIVE_GOALS)
        self.assertEquals(odd.odd_value, Decimal("2.33"))
        odd = Odd.objects.get(odd_bookie_config__name="to score three consecutive goals yes", period=0, team="h", param="3", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.CONSECUTIVE_GOALS)
        self.assertEquals(odd.odd_value, Decimal("4.9"))
        odd = Odd.objects.get(odd_bookie_config__name="to score three consecutive goals no", period=0, team="h", param="3", yes="N", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.CONSECUTIVE_GOALS)
        self.assertEquals(odd.odd_value, Decimal("1.18"))
        with self.assertRaises(Odd.DoesNotExist):
            odd = Odd.objects.get(odd_bookie_config__name="to score three consecutive goals yes", period=0, team="a", param="3", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        with self.assertRaises(Odd.DoesNotExist):
            odd = Odd.objects.get(odd_bookie_config__name="to score three consecutive goals no", period=0, team="a", param="3", yes="", match=match1, value_type__slug=ValueType.MAIN)
        odd = Odd.objects.get(odd_bookie_config__name="At least one team to score 3 consecutive goals yes", period=0, team="", param="3", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.CONSECUTIVE_GOALS)
        self.assertEquals(odd.odd_value, Decimal("3.9"))
        odd = Odd.objects.get(odd_bookie_config__name="At least one team to score 3 consecutive goals no", period=0, team="", param="3", yes="N", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.CONSECUTIVE_GOALS)
        self.assertEquals(odd.odd_value, Decimal("1.25"))

        odd = Odd.objects.get(odd_bookie_config__name="1st half total goals none", period=1, team="", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_UNDER)
        self.assertEquals(odd.odd_value, Decimal("3.1"))
        odd = Odd.objects.get(odd_bookie_config__name="1st half total goals one", period=1, team="", param="1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("2.65"))
        odd = Odd.objects.get(odd_bookie_config__name="1st half total goals two", period=1, team="", param="2", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("4.1"))
        odd = Odd.objects.get(odd_bookie_config__name="1st half total goals three", period=1, team="", param="3", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("9.3"))
        with self.assertRaises(Odd.DoesNotExist):
            odd = Odd.objects.get(odd_bookie_config__name="1st half total goals four", period=1, team="", param="4", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        odd = Odd.objects.get(odd_bookie_config__name="2nd half total goals none", period=2, team="", param="0.50", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_UNDER)
        self.assertEquals(odd.odd_value, Decimal("4.5"))
        odd = Odd.objects.get(odd_bookie_config__name="2nd half total goals one", period=2, team="", param="1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("3"))
        odd = Odd.objects.get(odd_bookie_config__name="2nd half total goals two", period=2, team="", param="2", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("3.55"))
        odd = Odd.objects.get(odd_bookie_config__name="2nd half total goals three", period=2, team="", param="3", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("6.2"))
        with self.assertRaises(Odd.DoesNotExist):
            odd = Odd.objects.get(odd_bookie_config__name="2nd half total goals four", period=2, team="", param="4", yes="Y", match=match1, value_type__slug=ValueType.MAIN)

        # print("!!!")
        # for odd in Odd.objects.filter(match=match1, bet_type__slug=BetType.TOTAL, period=2, param="1"):
        #     print("config=%s param=%s team=%s yes=%s value=%s" % (odd.odd_bookie_config.name, odd.param, odd.team, odd.yes, odd.odd_value)) 
        odd = Odd.objects.get(odd_bookie_config__name="1st half number of goals one", period=1, team="h", param="1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("2.7"))
        odd = Odd.objects.get(odd_bookie_config__name="1st half number of goals two", period=1, team="h", param="2", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("6.8"))
        odd = Odd.objects.get(odd_bookie_config__name="1st half number of goals one", period=1, team="a", param="1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("3.05"))
        with self.assertRaises(Odd.DoesNotExist):
            odd = Odd.objects.get(odd_bookie_config__name="1st half number of goals two", period=1, team="a", param="2", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        odd = Odd.objects.get(odd_bookie_config__name="2nd half number of goals one", period=2, team="h", param="1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("2.6"))
        odd = Odd.objects.get(odd_bookie_config__name="2nd half number of goals two", period=2, team="h", param="2", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("5"))
        odd = Odd.objects.get(odd_bookie_config__name="2nd half number of goals one", period=2, team="a", param="1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("2.8"))
        odd = Odd.objects.get(odd_bookie_config__name="2nd half number of goals two", period=2, team="a", param="2", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL)
        self.assertEquals(odd.odd_value, Decimal("7.9"))

        odd = Odd.objects.get(odd_bookie_config__name="1st half total goals Even/Odd even", period=1, team="", param="even", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_EVEN_ODD)
        self.assertEquals(odd.odd_value, Decimal("1.76"))
        odd = Odd.objects.get(odd_bookie_config__name="1st half total goals Even/Odd odd", period=1, team="", param="odd", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_EVEN_ODD)
        self.assertEquals(odd.odd_value, Decimal("2.06"))
        odd = Odd.objects.get(odd_bookie_config__name="2nd half total goals Even/Odd even", period=2, team="", param="even", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_EVEN_ODD)
        self.assertEquals(odd.odd_value, Decimal("1.84"))
        odd = Odd.objects.get(odd_bookie_config__name="2nd half total goals Even/Odd odd", period=2, team="", param="odd", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.TOTAL_EVEN_ODD)
        self.assertEquals(odd.odd_value, Decimal("1.97"))

        odd = Odd.objects.get(odd_bookie_config__name="Draw in either half yes", period=0, team="", param="", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.DRAW_IN_EITHER_HALF)
        self.assertEquals(odd.odd_value, Decimal("1.59"))
        odd = Odd.objects.get(odd_bookie_config__name="Draw in either half no", period=0, team="", param="", yes="N", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.DRAW_IN_EITHER_HALF)
        self.assertEquals(odd.odd_value, Decimal("2.37"))

        # print("!!!")
        # for odd in Odd.objects.filter(match=match1, bet_type__slug=BetType.HIGHEST_VALUE_HALF, period=0, team=""):
        #     print("config=%s param=%s team=%s yes=%s value=%s" % (odd.odd_bookie_config.name, odd.param, odd.team, odd.yes, odd.odd_value)) 
        odd = Odd.objects.get(odd_bookie_config__name="Highest scoring half 1st half", period=0, team="", param="1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.HIGHEST_VALUE_HALF)
        self.assertEquals(odd.odd_value, Decimal("3.2"))
        odd = Odd.objects.get(odd_bookie_config__name="Highest scoring half draw", period=0, team="", param="x", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.HIGHEST_VALUE_HALF)
        self.assertEquals(odd.odd_value, Decimal("3.8"))
        odd = Odd.objects.get(odd_bookie_config__name="Highest scoring half 2nd half", period=0, team="", param="2", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.HIGHEST_VALUE_HALF)
        self.assertEquals(odd.odd_value, Decimal("2.02"))

        # print("!!!")
        # for odd in Odd.objects.filter(match=match1, bet_type__slug=BetType.HIGHEST_VALUE_HALF, period=0, team="h"):
        #     print("config=%s param=%s team=%s yes=%s value=%s" % (odd.odd_bookie_config.name, odd.param, odd.team, odd.yes, odd.odd_value)) 
        odd = Odd.objects.get(odd_bookie_config__name="The half with more goals scored by 1st half", period=0, team="h", param="1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.HIGHEST_VALUE_HALF)
        self.assertEquals(odd.odd_value, Decimal("3.5"))
        odd = Odd.objects.get(odd_bookie_config__name="The half with more goals scored by Equal", period=0, team="h", param="x", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.HIGHEST_VALUE_HALF)
        self.assertEquals(odd.odd_value, Decimal("2.85"))
        odd = Odd.objects.get(odd_bookie_config__name="The half with more goals scored by 2nd half", period=0, team="h", param="2", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.HIGHEST_VALUE_HALF)
        self.assertEquals(odd.odd_value, Decimal("2.33"))
        odd = Odd.objects.get(odd_bookie_config__name="The half with more goals scored by 1st half", period=0, team="a", param="1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.HIGHEST_VALUE_HALF)
        self.assertEquals(odd.odd_value, Decimal("3.85"))
        odd = Odd.objects.get(odd_bookie_config__name="The half with more goals scored by Equal", period=0, team="a", param="x", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.HIGHEST_VALUE_HALF)
        self.assertEquals(odd.odd_value, Decimal("2.21"))
        odd = Odd.objects.get(odd_bookie_config__name="The half with more goals scored by 2nd half", period=0, team="a", param="2", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.HIGHEST_VALUE_HALF)
        self.assertEquals(odd.odd_value, Decimal("2.8"))

        odd = Odd.objects.get(odd_bookie_config__name="1st half correct score", period=1, team="", param="1:0", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.CORRECT_SCORE)
        self.assertEquals(odd.odd_value, Decimal("4.2"))
        with self.assertRaises(Odd.DoesNotExist):
            odd = Odd.objects.get(odd_bookie_config__name="1st half correct score", period=1, team="", param="2:0", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        odd = Odd.objects.get(odd_bookie_config__name="1st half correct score", period=1, team="", param="0:0", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.CORRECT_SCORE)
        self.assertEquals(odd.odd_value, Decimal("3.1"))
        odd = Odd.objects.get(odd_bookie_config__name="1st half correct score", period=1, team="", param="1:1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.CORRECT_SCORE)
        self.assertEquals(odd.odd_value, Decimal("8.2"))
        odd = Odd.objects.get(odd_bookie_config__name="1st half correct score", period=1, team="", param="0:1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.CORRECT_SCORE)
        self.assertEquals(odd.odd_value, Decimal("6.2"))
        odd = Odd.objects.get(odd_bookie_config__name="2nd half correct score", period=2, team="", param="1:0", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.CORRECT_SCORE)
        self.assertEquals(odd.odd_value, Decimal("4.7"))
        odd = Odd.objects.get(odd_bookie_config__name="2nd half correct score", period=2, team="", param="2:0", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.CORRECT_SCORE)
        self.assertEquals(odd.odd_value, Decimal("9.1"))
        odd = Odd.objects.get(odd_bookie_config__name="2nd half correct score", period=2, team="", param="0:0", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.CORRECT_SCORE)
        self.assertEquals(odd.odd_value, Decimal("4.5"))
        odd = Odd.objects.get(odd_bookie_config__name="2nd half correct score", period=2, team="", param="1:1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.CORRECT_SCORE)
        self.assertEquals(odd.odd_value, Decimal("7.1"))
        odd = Odd.objects.get(odd_bookie_config__name="2nd half correct score", period=2, team="", param="0:1", yes="Y", match=match1, value_type__slug=ValueType.MAIN)
        self.assertEquals(odd.bet_type.slug, BetType.CORRECT_SCORE)
        self.assertEquals(odd.odd_value, Decimal("7.2"))
