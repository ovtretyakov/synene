# Generated by Django 2.2.1 on 2021-12-21 11:46

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0017_auto_20211210_1604'),
        ('betting', '0010_merge_20211205_2310'),
    ]


    def init_harvest_data(apps, schema_editor):

        Sport = apps.get_model("core", "Sport")
        Country = apps.get_model("core", "Country")
        League = apps.get_model("core", "League")
        ValueType = apps.get_model("betting", "ValueType")

        england = Country.objects.get(slug="gbr")
        spain = Country.objects.get(slug="esp")
        german = Country.objects.get(slug="deu")
        italy = Country.objects.get(slug="ita")
        france = Country.objects.get(slug="fra")
        russia = Country.objects.get(slug="rus")

        HarvestHandler = apps.get_model('betting', 'HarvestHandler')
        Harvest = apps.get_model('betting', 'Harvest')
        HarvestConfig = apps.get_model('betting', 'HarvestConfig')
        HarvestGroup = apps.get_model('betting', 'HarvestGroup')
        HarvestLeague = apps.get_model('betting', 'HarvestLeague')

        harvest_handler = HarvestHandler.objects.create(
                                            slug = "xg", name = "xG Handler", handler = "xGHandler",
                                            param_descr = "Deviation goals and xG:\ndeviation-smooth-interval - smoothing interval\ndeviation-zero-value - zero value\nCalculation xG:\nsmooth-interval - smoothing interval \nzero-value - zero value"
                                            )
        harvest = Harvest.objects.create(
                                            slug = "hg-0",  name = "Calculate match xG",
                                            sport = Sport.objects.get(slug="football"), 
                                            harvest_handler = harvest_handler,
                                            value_type = ValueType.objects.get(slug="main"),
                                            period =0, status = 'a'
                                            )
        HarvestConfig.objects.create(harvest = harvest, code = "smooth-interval", value = "5")
        HarvestConfig.objects.create(harvest = harvest, code = "deviation-smooth-interval", value = "7")
        HarvestConfig.objects.create(harvest = harvest, code = "zero-value", value = "0.01")
        HarvestConfig.objects.create(harvest = harvest, code = "deviation-zero-value", value = "0.5")
 
        #england
        harvest_group = HarvestGroup.objects.create(
                                            slug = "hg-0-england", name = "Harvest England",
                                            harvest = harvest, country = england,
                                            status = 'n', harvest_date = None
                                            )
        league = League.objects.filter(slug="english-premier-league").first()
        if league:
            HarvestLeague.objects.create(harvest_group = harvest_group, league = league)

        #spain
        harvest_group = HarvestGroup.objects.create(
                                            slug = "hg-0-spain", name = "Harvest Spain",
                                            harvest = harvest, country = spain,
                                            status = 'n', harvest_date = None
                                            )
        league = League.objects.filter(slug="spanish-primera-division").first()
        if league:
            HarvestLeague.objects.create(harvest_group = harvest_group, league = league)

        #german
        harvest_group = HarvestGroup.objects.create(
                                            slug = "hg-0-german", name = "Harvest German",
                                            harvest = harvest, country = german,
                                            status = 'n', harvest_date = None
                                            )
        league = League.objects.filter(slug="german-bundesliga").first()
        if league:
            HarvestLeague.objects.create(harvest_group = harvest_group, league = league)

        #italy
        harvest_group = HarvestGroup.objects.create(
                                            slug = "hg-0-italy", name = "Harvest Italy",
                                            harvest = harvest, country = italy,
                                            status = 'n', harvest_date = None
                                            )
        league = League.objects.filter(slug="italian-serie-a").first()
        if league:
            HarvestLeague.objects.create(harvest_group = harvest_group, league = league)

        #france
        harvest_group = HarvestGroup.objects.create(
                                            slug = "hg-0-france", name = "Harvest France",
                                            harvest = harvest, country = france,
                                            status = 'n', harvest_date = None
                                            )
        league = League.objects.filter(slug="french-ligue-1").first()
        if league:
            HarvestLeague.objects.create(harvest_group = harvest_group, league = league)

        #russia
        harvest_group = HarvestGroup.objects.create(
                                            slug = "hg-0-russia", name = "Harvest Russia",
                                            harvest = harvest, country = russia,
                                            status = 'n', harvest_date = None
                                            )
        league = League.objects.filter(slug="russian-premier-league").first()
        if league:
            HarvestLeague.objects.create(harvest_group = harvest_group, league = league)


    operations = [
        migrations.CreateModel(
            name='ForecastHandler',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(unique=True)),
                ('name', models.CharField(max_length=100, verbose_name='Forecast Handler')),
                ('handler', models.CharField(blank=True, max_length=100, verbose_name='Handler')),
            ],
        ),
        migrations.CreateModel(
            name='ForecastSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(unique=True)),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='Name')),
                ('forecast_date', models.DateTimeField(blank=True, null=True, verbose_name='Forecast date')),
                ('forecast_time', models.IntegerField(null=True, verbose_name='Seconds')),
                ('status', models.CharField(choices=[('p', 'Preapred'), ('s', 'Success'), ('e', 'Error')], default='p', max_length=5, verbose_name='Status')),
                ('match_cnt', models.IntegerField(null=True, verbose_name='Matches')),
                ('odd_cnt', models.IntegerField(null=True, verbose_name='Odds')),
                ('keep_only_best', models.BooleanField(verbose_name='Keep only best prediction')),
                ('only_finished', models.BooleanField(verbose_name='Only finished matches')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='Start date')),
            ],
        ),
        migrations.CreateModel(
            name='Harvest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('name', models.CharField(max_length=100, verbose_name='Script')),
                ('comment', models.CharField(blank=True, max_length=1000, verbose_name='Comment')),
                ('period', models.IntegerField(verbose_name='Period')),
                ('status', models.CharField(choices=[('a', 'Active'), ('n', 'Inactive')], default='n', max_length=5, verbose_name='Status')),
            ],
        ),
        migrations.CreateModel(
            name='HarvestGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('name', models.CharField(max_length=100, verbose_name='Group')),
                ('status', models.CharField(choices=[('a', 'Active'), ('n', 'Inactive')], default='n', max_length=5, verbose_name='Status')),
                ('harvest_date', models.DateField(blank=True, null=True, verbose_name='Harvest date')),
                ('last_update', models.DateTimeField(blank=True, null=True, verbose_name='Last update')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.Country', verbose_name='Country')),
                ('harvest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='betting.Harvest', verbose_name='Harvest')),
            ],
        ),
        migrations.CreateModel(
            name='HarvestHandler',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(unique=True)),
                ('name', models.CharField(max_length=100, verbose_name='Harvest Type')),
                ('param_descr', models.CharField(blank=True, max_length=1000, verbose_name='Parameter Description')),
                ('handler', models.CharField(blank=True, max_length=100, verbose_name='Handler')),
            ],
        ),
        migrations.CreateModel(
            name='TeamSkill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_date', models.DateField(verbose_name='Event date')),
                ('match_cnt', models.IntegerField(verbose_name='Match Count')),
                ('lvalue1', models.DecimalField(decimal_places=5, max_digits=10, verbose_name='LValue1')),
                ('lvalue2', models.DecimalField(decimal_places=5, max_digits=10, verbose_name='LValue1')),
                ('lvalue3', models.DecimalField(decimal_places=5, max_digits=10, verbose_name='LValue1')),
                ('lvalue4', models.DecimalField(decimal_places=5, max_digits=10, verbose_name='LValue1')),
                ('lvalue5', models.DecimalField(decimal_places=5, max_digits=10, verbose_name='LValue1')),
                ('lvalue6', models.DecimalField(decimal_places=5, max_digits=10, verbose_name='LValue1')),
                ('lvalue7', models.DecimalField(decimal_places=5, max_digits=10, verbose_name='LValue1')),
                ('lvalue8', models.DecimalField(decimal_places=5, max_digits=10, verbose_name='LValue1')),
                ('lvalue9', models.DecimalField(decimal_places=5, max_digits=10, verbose_name='LValue1')),
                ('lvalue10', models.DecimalField(decimal_places=5, max_digits=10, verbose_name='LValue1')),
                ('value1', models.DecimalField(decimal_places=5, max_digits=10, verbose_name='LValue1')),
                ('value2', models.DecimalField(decimal_places=5, max_digits=10, verbose_name='LValue1')),
                ('value3', models.DecimalField(decimal_places=5, max_digits=10, verbose_name='LValue1')),
                ('value4', models.DecimalField(decimal_places=5, max_digits=10, verbose_name='LValue1')),
                ('value5', models.DecimalField(decimal_places=5, max_digits=10, verbose_name='LValue1')),
                ('value6', models.DecimalField(decimal_places=5, max_digits=10, verbose_name='LValue1')),
                ('value7', models.DecimalField(decimal_places=5, max_digits=10, verbose_name='LValue1')),
                ('value8', models.DecimalField(decimal_places=5, max_digits=10, verbose_name='LValue1')),
                ('value9', models.DecimalField(decimal_places=5, max_digits=10, verbose_name='LValue1')),
                ('value10', models.DecimalField(decimal_places=5, max_digits=10, verbose_name='LValue1')),
                ('harvest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='betting.Harvest', verbose_name='Harvest')),
                ('harvest_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='betting.HarvestGroup', verbose_name='Harvest Group')),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Match', verbose_name='Match')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Team', verbose_name='Team')),
            ],
        ),
        migrations.CreateModel(
            name='Predictor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(unique=True)),
                ('name', models.CharField(max_length=100, verbose_name='Predictor')),
                ('comment', models.CharField(blank=True, max_length=1000, verbose_name='Comment')),
                ('priority', models.IntegerField(verbose_name='Priority')),
                ('status', models.CharField(choices=[('a', 'Active'), ('n', 'Inactive')], default='n', max_length=5, verbose_name='Status')),
                ('forecast_handler', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='betting.ForecastHandler', verbose_name='Forecast Type')),
                ('harvest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='betting.Harvest', verbose_name='Harvest')),
            ],
        ),
        migrations.CreateModel(
            name='HarvestLeague',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('harvest_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='betting.HarvestGroup', verbose_name='Harvest Group')),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.League', verbose_name='League')),
            ],
        ),
        migrations.CreateModel(
            name='HarvestConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=100, verbose_name='Code')),
                ('value', models.CharField(blank=True, max_length=1000, verbose_name='Value')),
                ('harvest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='betting.Harvest', verbose_name='Harvest')),
            ],
        ),
        migrations.AddField(
            model_name='harvest',
            name='harvest_handler',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='betting.HarvestHandler', verbose_name='Harvest Type'),
        ),
        migrations.AddField(
            model_name='harvest',
            name='sport',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.Sport', verbose_name='Sport'),
        ),
        migrations.AddField(
            model_name='harvest',
            name='value_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='betting.ValueType', verbose_name='Vaue Type'),
        ),
        migrations.CreateModel(
            name='Forecast',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_date', models.DateField(blank=True, null=True, verbose_name='Match date')),
                ('success_chance', models.DecimalField(decimal_places=3, max_digits=10, verbose_name='Success chance')),
                ('lose_chance', models.DecimalField(decimal_places=3, max_digits=10, verbose_name='Lose chance')),
                ('result_value', models.DecimalField(decimal_places=3, max_digits=10, verbose_name='Result value')),
                ('kelly', models.DecimalField(decimal_places=3, max_digits=10, verbose_name='kelly')),
                ('forecast_set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='betting.ForecastSet', verbose_name='Forecast set')),
                ('harvest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='betting.Harvest', verbose_name='Harvest')),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Match', verbose_name='Match')),
                ('odd', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='betting.Odd', verbose_name='Odd')),
                ('predictor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='betting.Predictor', verbose_name='Predictor')),
            ],
        ),
        migrations.CreateModel(
            name='xGHandler',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('betting.teamskill',),
        ),
        migrations.AddIndex(
            model_name='teamskill',
            index=models.Index(fields=['harvest_group', 'event_date'], name='team_skill_hgroup_edate_idx'),
        ),
        migrations.AddConstraint(
            model_name='teamskill',
            constraint=models.UniqueConstraint(fields=('harvest', 'team', 'event_date', 'match'), name='unique_team_skill_harvest'),
        ),
        migrations.AddConstraint(
            model_name='harvestleague',
            constraint=models.UniqueConstraint(fields=('harvest_group', 'league'), name='unique_harvest_league'),
        ),
        migrations.AddConstraint(
            model_name='harvestconfig',
            constraint=models.UniqueConstraint(fields=('harvest', 'code'), name='unique_harvest_conf'),
        ),
        migrations.AddConstraint(
            model_name='forecast',
            constraint=models.UniqueConstraint(fields=('forecast_set', 'match', 'odd', 'predictor'), name='unique_forecast'),
        ),

        migrations.RunPython(init_harvest_data),
        
    ]
